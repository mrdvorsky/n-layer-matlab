function [sliderHandle] = addSlider(panel, val, valRange, options)
%Add slider to figure or panel.
% The slider will additionally have edit fields for min, max, and current
% value. The min and max values can be editable or not depending on
% settings.
%
% This is for nLayerViewer.
% 
% Author: Matt Dvorsky

arguments
    panel(1, 1);
    val(1, 1);
    valRange(2, 1);

    options.ValueChangedHandler = @(val) val;

    options.SliderWidth(1, 1) = 0.6;
    options.SliderHeight(1, 1) = 0.15;

    options.SliderHeightOffset(1, 1) = 0;
end

%% Create Slider
sliderStartVal = (val - min(valRange)) ./ (max(valRange) - min(valRange));
sliderHandle = uicontrol(Parent=panel, ...
    Style="slider", Units="normalized", ...
    Value=max(0, min(1, sliderStartVal)), ...
    Position=[...
        0.12, ...
        1 - options.SliderHeightOffset - options.SliderHeight, ...
        options.SliderWidth, ...
        options.SliderHeight, ...
    ]);

%% Create Edit Fields
currentValueField = uicontrol(Style="edit", ...
    Parent=panel, Units="Normalized", ...
    Value=val, ...
    String=num2str(val), ...
    Position=[...
        0.82, ...
        1 - options.SliderHeightOffset - options.SliderHeight, ...
        0.163, ...
        options.SliderHeight, ...
    ]);

lowerBoundField = uicontrol(Style="edit", ...
    Parent=panel, Units="Normalized", ...
    Value=min(valRange), ...
    String=num2str(min(valRange)), ...
    Position=[...
        0.02, ...
        1 - options.SliderHeightOffset - options.SliderHeight, ...
        0.1, ...
        options.SliderHeight, ...
    ]);

upperBoundField = uicontrol(Style="edit", ...
    Parent=panel, Units="Normalized", ...
    Value=max(valRange), ...
    String=num2str(max(valRange)), ...
    Position=[...
        0.717, ...
        1 - options.SliderHeightOffset - options.SliderHeight, ...
        0.1, ...
        options.SliderHeight, ...
    ]);

%% Setup CallBacks
% Use "addlistener" to update while slider is moving.
sliderListener = sliderHandle.addlistener("Value", "PostSet", ...
    @(~, ~) sliderCallback(sliderHandle, ...
        currentValueField, lowerBoundField, upperBoundField, ...
        options.ValueChangedHandler));

% sliderHandle.Callback = {@sliderCallback, ...
%     sliderHandle, currentValueField, lowerBoundField, upperBoundField, ...
%     options.ValueChangedHandler};


% Edit field callbacks
currentValueField.Callback = {@fieldCallback, ...
    sliderHandle, currentValueField, lowerBoundField, upperBoundField, ...
    sliderListener, options.ValueChangedHandler};
lowerBoundField.Callback = {@fieldCallback, ...
    sliderHandle, currentValueField, lowerBoundField, upperBoundField, ...
    sliderListener, options.ValueChangedHandler};
upperBoundField.Callback = {@fieldCallback, ...
    sliderHandle, currentValueField, lowerBoundField, upperBoundField, ...
    sliderListener, options.ValueChangedHandler};

end




%% Callbacks
function valueChangedCallback(val, userCallback)
    if iscell(userCallback)
        userCallback{1}(val, userCallback{2:end});
    else
        userCallback(val);
    end
end

function sliderCallback(slider, cvField, minField, maxField, userCallback)
    minVal = minField.Value;
    maxVal = maxField.Value;

    cvField.Value = minVal + (maxVal - minVal)*slider.Value;
    cvField.String = num2str(cvField.Value);

    valueChangedCallback(cvField.Value, userCallback);
end

function fieldCallback(src, ~, slider, cvField, minField, maxField, sliderListener, userCallback)
    newVal = str2double(src.String);
    oldVal = src.Value;
    
    if isnan(newVal) || ~isreal(newVal)
        src.String = num2str(oldVal);
        return;
    end

    src.Value = newVal;

    currentVal = cvField.Value;
    minVal = minField.Value;
    maxVal = maxField.Value;

    sliderListener.Enabled = false;
    slider.Value = max(0, min(1, ...
        (currentVal - minVal) ./ (maxVal - minVal)));
    sliderListener.Enabled = true;

    if src == cvField
        try
            valueChangedCallback(cvField.Value, userCallback);
        catch ex
            src.String = num2str(oldVal);
            src.Value = oldVal;

            rethrow(ex);
        end
    end
end




